if (plot_graf) # plot graphs
{
par(mfrow = c(3,2))
hist(chain[,1], main=paste0("(b=", b, " :: c=", c, ")"))
hist(chain[,2])
plot(chain[,1],type='l')
plot(chain[,2],type='l')
acf(chain[,1])
acf(chain[,2])
}
return(chain)
}
b = 5
c = 5
x = c(0.56, 2.26, 1.90, 0.94, 1.40, 1.39, 1.00, 1.45, 2.32, 2.08, 0.89, 1.68)
NN = 10000
chain = run(b,c,x,NN,F)
mean(chain[,1])
mean(chain[,2])
NN = 50000
chain = run(b,c,x,NN,F)
mean(chain[,1])
mean(chain[,2])
MAPs = rep(NA, NN)
for (i in 1:NN) MAPs[i] = post_pi(chain[i,1],chain[i,2],b,c,x)
max(MAPs)
MAPs
0.05/2
1-0.025
quantile(chain[,1], probs = c(0.025, 0.975))
MAPs = rep(NA, NN)
for (i in 1:NN) MAPs[i] = post_pi(chain[i,1],chain[i,2],b,c,x)
max(MAPs)
quantile(chain[,1], probs = c(0.025, 0.975))
quantile(chain[,2], probs = c(0.025, 0.975))
MM = 15
params = rep(1, MM)
for (i in 2:MM) params[i] = 1.4*params[i-1]
params
for (i in params)
{
for (j in params)
{
tryCatch({
run(b=i,c=j,T)
}, warning = function(w) {
print(paste(i,j))
}, error = function(e) {
print(paste(i,j))
}, finally = {
})
}
}
MM = 15
params = rep(1, MM)
for (i in 2:MM) params[i] = 1.4*params[i-1]
params
for (i in params)
{
for (j in params)
{
tryCatch({
run(b=i,c=j,T)
}, warning = function(w) {
print(paste(i,j,e))
}, error = function(e) {
print(paste(i,j,e))
}, finally = {
})
}
}
run = function(b,c,x, NN = 50000, plot_graf=F)
{
chain = matrix(nrow=NN, ncol=2)
chain[1,] = c(1,1)
for (i in 2:NN)
{
a1 = chain[i-1,1]
n1 = chain[i-1,2]
a2 = rexp(1, 1/a1)
n2 = rexp(1, 1/n1)
if (log(runif(1)) <= log_p(a2,n2,a1,n1, b,c,x))
chain[i,] = c(a2,n2)
else
chain[i,] = chain[i-1,]
}
if (plot_graf) # plot graphs
{
par(mfrow = c(3,2))
hist(chain[,1], main=paste0("(b=", b, " :: c=", c, ")"))
hist(chain[,2])
plot(chain[,1],type='l')
plot(chain[,2],type='l')
acf(chain[,1])
acf(chain[,2])
}
return(chain)
}
b = 5
c = 5
x = c(0.56, 2.26, 1.90, 0.94, 1.40, 1.39, 1.00, 1.45, 2.32, 2.08, 0.89, 1.68)
NN = 50000
chain = run(b,c,x,NN,F)
mean(chain[,1])
mean(chain[,2])
MAPs = rep(NA, NN)
for (i in 1:NN) MAPs[i] = post_pi(chain[i,1],chain[i,2],b,c,x)
max(MAPs)
quantile(chain[,1], probs = c(0.025, 0.975))
quantile(chain[,2], probs = c(0.025, 0.975))
par(mfrow = c(3,2))
hist(chain[,1])
hist(chain[,2])
plot(chain[,1],type='l')
plot(chain[,2],type='l')
acf(chain[,1])
acf(chain[,2])
MM = 15
params = rep(1, MM)
for (i in 2:MM) params[i] = 1.4*params[i-1]
params
for (i in params)
{
for (j in params)
{
tryCatch({
run(b=i, c=j, x, NN=10000, T)
}, warning = function(w) {
print(paste(i,j,e))
}, error = function(e) {
print(paste(i,j,e))
}, finally = {
})
}
}
b = 20
c = 10
x = c(0.56, 2.26, 1.90, 0.94, 1.40, 1.39, 1.00, 1.45, 2.32, 2.08, 0.89, 1.68)
NN = 50000
chain = run(b,c,x,NN,T)
mean(chain[,1])
mean(chain[,2])
MAPs = rep(NA, NN)
for (i in 1:NN) MAPs[i] = post_pi(chain[i,1],chain[i,2],b,c,x)
max(MAPs)
b = 5
c = 5
x = c(0.56, 2.26, 1.90, 0.94, 1.40, 1.39, 1.00, 1.45, 2.32, 2.08, 0.89, 1.68)
NN = 50000
chain = run(b,c,x,NN,T)
mean(chain[,1])
mean(chain[,2])
MAPs = rep(NA, NN)
for (i in 1:NN) MAPs[i] = post_pi(chain[i,1],chain[i,2],b,c,x)
max(MAPs)
which(MAPs == max(MAPs))
which(MAPs == max(MAPs))[1]
c(chain[map_idx,1],chain[map_idx,2])
# MAP estimate
MAPs = rep(NA, NN)
for (i in 1:NN) MAPs[i] = post_pi(chain[i,1],chain[i,2],b,c,x)
map_idx = which(MAPs == max(MAPs))[1]
c(chain[map_idx,1],chain[map_idx,2])
# 95% credible interval
quantile(chain[,1], probs = c(0.025, 0.975))
quantile(chain[,2], probs = c(0.025, 0.975))
# posterior mean
b = 5
c = 5
x = c(0.56, 2.26, 1.90, 0.94, 1.40, 1.39, 1.00, 1.45, 2.32, 2.08, 0.89, 1.68)
NN = 50000
chain = run(b,c,x,NN,T)
c(alpha=mean(chain[,1]),eta=mean(chain[,2]))
19+9
knitr::opts_chunk$set(echo = TRUE)
x_ = seq(0,1,1/100)
x_
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
x_ = seq(0,1,1/100)
x_
x_
dbeta(x_, a_post, b_post)
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
a_prior = 0.5
b_prior = 0.5
a_post = a_prior + sum(x)
b_post = b_prior + n - sum(x)
x_ = seq(0,1,1/100)
dbeta(x_, a_post, b_post)
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
a_prior = 0.5
b_prior = 0.5
a_post = a_prior + sum(x)
b_post = b_prior + n - sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/100)
dbeta(x_, a_post, b_post)
plot(x=x_,y=y_)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_)
plot(x=x_,y=y_,type='l')
(function (x) x+1) (1)
soy = (function (x) x+1)
soy(1)
bayes_estimate = function (a,b) a/(a+b)
bayes_estimate
bay_estimate = function (a,b) a/(a+b)
map_estimate = function (a,b) (a-1)/(a+b-2)
bay_estimate(1,1)
plot_posterior = function(a_prior, b_prior)
{
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l')
}
plot_posterior(0.5,0.5)
plot_posterior(1,1)
plot_posterior = function(a_prior, b_prior)
{
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l')
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
plot_posterior(0.5,0.5)
plot_posterior = function(a_prior, b_prior)
{
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l')
print(paste("for prior a=", a, "b=",b))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
plot_posterior(0.5,0.5)
plot_posterior = function(a_prior, b_prior)
{
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l')
print(paste("for prior a=", a_prior, "b=",b_prior))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
plot_posterior(0.5,0.5)
plot_posterior = function(a_prior, b_prior)
{
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l')
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
plot_posterior(0.5,0.5)
plot_posterior = function(a_prior, b_prior)
{
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l', add=T)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
plot_posterior(0.5,0.5)
plot_posterior(1,1)
soy = boy = 420
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
bay_estimate = function (a,b) a/(a+b)
map_estimate = function (a,b) (a-1)/(a+b-2)
for (i in c(0.5, 1, 10, 100))
{
a_prior = i
b_prior = i
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l', add=T)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
for (i in c(0.5, 1, 10, 100))
{
a_prior = i
b_prior = i
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
plot(x=x_,y=y_,type='l')
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
for (i in c(0.5, 1, 10, 100))
{
a_prior = i
b_prior = i
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
lines(x=x_,y=y_,type='l')
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
dev.off(dev.list()["RStudioGD"])
for (i in c(0.5, 1, 10, 100))
{
a_prior = i
b_prior = i
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
lines(x=x_,y=y_,type='l')
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
dev.off(dev.list()["RStudioGD"]) # clear plots
params = c(0.5, 1, 10, 100)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l')
else lines(x=x_,y=y_)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
params = c(0.5, 1, 10, 100)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i])
else lines(x=x_,y=y_, col=colors[i])
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
params = c(0.5, 1, 10, 100)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i], ylim=c(0,1))
else lines(x=x_,y=y_, col=colors[i], ylim=c(0,1))
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
params = c(0.5, 1, 10, 100)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i], ylim=c(0,2))
else lines(x=x_,y=y_, col=colors[i], ylim=c(0,1))
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
params = c(0.5, 1, 10, 100)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i], ylim=c(0,10))
else lines(x=x_,y=y_, col=colors[i], ylim=c(0,10))
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
legend(2, 4, legend=params, fill = colors)
legend(x = "topleft", legend=params, fill = colors)
legend(x = "topright", legend=params, fill = colors)
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
bay_estimate = function (a,b) a/(a+b)
map_estimate = function (a,b) (a-1)/(a+b-2)
params = c(0.5, 1, 10, 100)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i], ylim=c(0,10))
else lines(x=x_,y=y_, col=colors[i], ylim=c(0,10))
legend(x = "topright", legend=params, fill = colors)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
params = c(100, 10, 1, 0.5)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i], ylim=c(0,10))
else lines(x=x_,y=y_, col=colors[i], ylim=c(0,10))
legend(x = "topright", legend=params, fill = colors)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
params = c(100, 10, 1, 0.5)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
bay_estimate = function (a,b) a/(a+b)
map_estimate = function (a,b) (a-1)/(a+b-2)
params = c(100, 10, 1, 0.5)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i])
else lines(x=x_,y=y_, col=colors[i])
legend(x = "topright", legend=params, fill = colors)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
)))))))))))))
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
bay_estimate = function (a,b) a/(a+b)
map_estimate = function (a,b) (a-1)/(a+b-2)
params = c(100, 10, 1, 0.5)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1) plot(x=x_,y=y_,type='l', col=colors[i])
else lines(x=x_,y=y_, col=colors[i])
legend(x = "topright", legend=params, fill = colors)
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
problem_1_15 = function()
{
x = c(0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0)
bay_estimate = function (a,b) a/(a+b)
map_estimate = function (a,b) (a-1)/(a+b-2)
params = c(100, 10, 1, 0.5)
colors = c('red','green','blue','purple')
for (i in 1:4)
{
a_prior = params[i]
b_prior = params[i]
a_post = a_prior + sum(x)
b_post = b_prior + length(x) - sum(x)
x_ = seq(0,1,1/1000)
y_ = dbeta(x_, a_post, b_post)
if (i==1)
{
plot(x=x_,y=y_,type='l', col=colors[i])
legend(x = "topright", legend=params, fill = colors)
}
else lines(x=x_,y=y_, col=colors[i])
print(paste("for prior (", a_prior, ",",b_prior, ")"))
print(c(Bayes=bay_estimate(a_post, b_post), MAP=map_estimate(a_post, b_post)))
}
}
problem_1_15()
for (i in 1:20) print(i)
setwd("~/Desktop/_backups/notes/r/840_exercises")
